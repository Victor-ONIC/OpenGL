// GLFW
int glfwInit();
void glfwTerminate();

void glfwWindowHint(int hint,
                    int value);

GLFWwindow* glfwCreateWindow(int width,
                             int height,
                             const char* title,
                             GLFWmonitor* monitor,
                             GLFWwindow* share);

void glfwMakeContextCurrent(GLFWwindow* window);

GLFWframebuffsizefun glfwSetFramebufferSizeCallback(GLFWwindow* window,
                                                    GLFWframebuffersizefun callback);

int glfwWindowShouldClose(GLFWwindow* window);
void glfwSetWindowShouldClose(GLFWwindow* window,
                              int value);

void glfwSwapBuffers(GLFWwindow* window);

void glfwPollEvents();

int glfwGetKey(GLFWwindow* window,
               int key);

double glfwGetTime();



// GLEW
GLenum glewInit();



// MISC
const GLubyte* glGetString(GLenum name);



// BUFFERS
void glGenBuffers(GLsizei n,
                  GLuint* buffers);
void glDeleteBuffers(GLsizei n,
                     const GLluint* buffers);

void glGenVertexArrays(GLsizei n,
                       GLuint* arrays);
void glDeleteVertexArrays(GLsizei n,
                          GLuint* arrays);

void glBindBuffer(GLenum target,
                  GLuint buffer);

void glBufferData(GLenum target,
                  GLsizeiptr size,
                  const GLvoid* data,
                  GLenum usage);

void glBindVertexArray(GLuint array);

void glEnableVertexAttribArray(GLuint index);
void glDisableVertexAttribArray(GLuint index);

void glVertexAttribPointer(GLuint index,
                           GLint size,
                           GLenum type,
                           GLboolean normalized,
                           GLsizei stride,
                           const GLvoid* pointer);



// SHADERS
GLuint glCreateProgram();
void glDeleteProgram(GLuint program);

GLuint glCreateShader(GLenum shaderType);
void glDeleteShader(GLuint shader);

void glShaderSource(GLuint shader,
                    GLsizei count,
                    const CLchar** string,
                    const GLint* length);

void glCompileShader(GLuint shader);

void glAttachShader(GLuint program,
                    GLuint shader);

void glLinkProgram(GLuint program);

void glValidateProgram(GLuint program);

void glGetShaderiv(GLuint shader,
                   GLenum pname,
                   GLint* params);

void glGetShaderInfoLog(GLuint shader,
                        GLsizei maxLength,
                        GLsizei *length,
                        GLchar *infoLog);

void glGetProgramiv(GLuint program,
                    GLenum pname,
                    GLint* params);

void glGetProgramInfoLog(GLuint program,
                         GLsizei maxLength,
                         GLsizei* length,
                         GLchar* infoLog);

void glUseProgram(GLuint program);

void glGetUniformLocation(GLuint program,
                          const GLchar* name);

void glUniform4f(GLuint location,
                 float v0,
                 float v1,
                 float v2,
                 float v3);

void glUniform1i(GLuint location,
                GLint v0);



// TEXTURES
void glGenTextures(GLsizei n,
                   GLuint* textures);
void glDeleteTextures(GLsizei n,
                      const GLuint* textures);

void glBindTexture(GLenum target,
                   GLuint texture);

void glTexParameteri(GLenum target,
                     GLenum pname,
                     GLint param);

void glTexImage2D(GLenum target,
                  GLint level,
                  GLint internalFormat,
                  GLsizei width,
                  GLsizei height,
                  GLint border,
                  GLenum format,
                  GLenum type,
                  const GLvoid* data);

void glGenerateMipmap(GLenum target);

void glActiveTexture(GLenum texture);



// RENDERING
void glViewport(GLint x,
                GLint y,
                GLsizei width,
                GLsizei height);

void glClear(GLbitfield mask);

void glClearColor(GLfloat red,
                  GLfloat green,
                  GLfloat blue,
                  GLBloat alpha);

void glDrawArrays(GLenum mode,
                  GLint first,
                  GLsizei count);

void glDrawElements(GLenum mode,
                    GLsizei count,
                    GLenum type,
                    const GLvoid* indices);

void glPolygonMode(GLenum face,
                   GLenum mode);



// GLSL
genType mix(genType x,
            genType y,
            genType a);

gvec4 texture(gsampler2D sample,
              vec2 P,
              [float bias]);
